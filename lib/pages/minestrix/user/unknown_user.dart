import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:matrix/matrix.dart';
import 'package:minestrix_chat/config/matrix_types.dart';
import 'package:minestrix_chat/utils/profile_space.dart';
import 'package:minestrix_chat/utils/spaces/space_extension.dart';
import 'package:minestrix_chat/view/room_list_page.dart';
import 'package:minestrix_chat/view/room_page.dart';

import '../../../partials/components/buttons/MinesTrixButton.dart';
import '../../../partials/components/buttons/customFutureButton.dart';
import '../../../partials/feed/minestrixProfileNotCreated.dart';
import 'user_view_page.dart';

class UnknownUser extends StatelessWidget {
  final User? user_in;
  final Client client;
  final String? userId;
  const UnknownUser(
      {Key? key,
      required this.user_in,
      required this.client,
      required this.userId})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 20),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: FutureBuilder<List<SpaceRoom>?>(
                    future: getProfileSpaceContent(),
                    builder: (context, snapshot) {
                      List<SpaceRoom> profiles = (snapshot.data ?? [])
                          .where((SpaceRoom room) =>
                              room.roomType == MatrixTypes.account)
                          .toList();
// we ignore generated by getProfileSpaceContent when the space doesn't exist
                      return Column(
                        children: [
                          for (SpaceRoom space in profiles)
                            if ([JoinRules.knock, JoinRules.public]
                                    .contains(space.joinRule) &&
                                (client.getRoomById(space.id) == null ||
                                    ![Membership.knock, Membership.join]
                                        .contains(client
                                            .getRoomById(space.id)
                                            ?.membership)))
                              CustomFutureButton(
                                  icon: Icon(Icons.person_add,
                                      color: Theme.of(context)
                                          .colorScheme
                                          .onPrimary),
                                  color: Theme.of(context).primaryColor,
                                  children: [
                                    Text(space.name,
                                        style: TextStyle(
                                            color: Theme.of(context)
                                                .colorScheme
                                                .onPrimary)),
                                    Text("Follow",
                                        style: TextStyle(
                                            fontWeight: FontWeight.bold,
                                            color: Theme.of(context)
                                                .colorScheme
                                                .onPrimary))
                                  ],
                                  onPressed: () async {
                                    switch (space.joinRule) {
                                      case JoinRules.public:
                                        client.joinRoom(space
                                            .id); // TODO:Â update me to support joining over federation (need the via field)
                                        await client
                                            .waitForRoomInSync(space.id);

                                        break;
                                      case JoinRules.knock:
                                        client.knockRoom(space.id);
                                        await client
                                            .waitForRoomInSync(space.id);

                                        break;
                                      default:
                                    }
                                    client.knockRoom(space.id);
                                  },
                                  expanded: false),
                        ],
                      );
                    }),
              ),
              if (user_in != null && user_in?.membership == Membership.invite)
                Flexible(
                    child: MinesTrixButton(
                  icon: Icons.send,
                  label: "Friend request sent",
                  onPressed: null,
                )),
              if (user_in != null && user_in?.membership == Membership.join)
                Flexible(
                    child: MinesTrixButton(
                  icon: Icons.person,
                  label: "Friend",
                  onPressed: null,
                )),
              SizedBox(width: 30),
              if (userId != client.userID && userId != null)
                MessageButton(userId: userId!)
            ],
          ),
        ),
        userId != client.userID
            ? Padding(
                padding:
                    const EdgeInsets.symmetric(horizontal: 60, vertical: 100),
                child: Column(
                  children: [
                    Text("Your are not in this user friend list",
                        style: TextStyle(fontSize: 40)),
                    Padding(
                      padding: const EdgeInsets.all(20.0),
                      child: Text("ðŸ˜§", style: TextStyle(fontSize: 40)),
                    ),
                    Text(
                        "Or he/she may not have a MINESTRIX account (yet), send him a message ;)",
                        style: TextStyle(fontSize: 20))
                  ],
                ),
              )
            : MinestrixProfileNotCreated()
      ],
    );
  }

  Future<List<SpaceRoom>?> getProfileSpaceContent() async {
    if (userId != null) {
      var roomId =
          await client.getRoomIdByAlias(ProfileSpace.getAliasName(userId!));
      if (roomId.roomId == null) return null;
      return await client.getRoomHierarchy(roomId.roomId!);
    }
    return null;
  }
}
